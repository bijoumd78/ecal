// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opencv {

namespace {

const ::google::protobuf::Descriptor* OcvMat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OcvMat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_image_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_image_2eproto() {
  protobuf_AddDesc_image_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "image.proto");
  GOOGLE_CHECK(file != NULL);
  OcvMat_descriptor_ = file->message_type(0);
  static const int OcvMat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, elt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, elt_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, mat_data_),
  };
  OcvMat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OcvMat_descriptor_,
      OcvMat::default_instance_,
      OcvMat_offsets_,
      -1,
      -1,
      -1,
      sizeof(OcvMat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OcvMat, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_image_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OcvMat_descriptor_, &OcvMat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_image_2eproto() {
  delete OcvMat::default_instance_;
  delete OcvMat_reflection_;
}

void protobuf_AddDesc_image_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_image_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013image.proto\022\006opencv\"f\n\006OcvMat\022\n\n\002id\030\001 "
    "\001(\005\022\014\n\004rows\030\002 \001(\005\022\014\n\004cols\030\003 \001(\005\022\020\n\010elt_t"
    "ype\030\004 \001(\005\022\020\n\010elt_size\030\005 \001(\005\022\020\n\010mat_data\030"
    "\006 \001(\014b\006proto3", 133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image.proto", &protobuf_RegisterTypes);
  OcvMat::default_instance_ = new OcvMat();
  OcvMat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_image_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_image_2eproto {
  StaticDescriptorInitializer_image_2eproto() {
    protobuf_AddDesc_image_2eproto();
  }
} static_descriptor_initializer_image_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OcvMat::kIdFieldNumber;
const int OcvMat::kRowsFieldNumber;
const int OcvMat::kColsFieldNumber;
const int OcvMat::kEltTypeFieldNumber;
const int OcvMat::kEltSizeFieldNumber;
const int OcvMat::kMatDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OcvMat::OcvMat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencv.OcvMat)
}

void OcvMat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OcvMat::OcvMat(const OcvMat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opencv.OcvMat)
}

void OcvMat::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  rows_ = 0;
  cols_ = 0;
  elt_type_ = 0;
  elt_size_ = 0;
  mat_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OcvMat::~OcvMat() {
  // @@protoc_insertion_point(destructor:opencv.OcvMat)
  SharedDtor();
}

void OcvMat::SharedDtor() {
  mat_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OcvMat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OcvMat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OcvMat_descriptor_;
}

const OcvMat& OcvMat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2eproto();
  return *default_instance_;
}

OcvMat* OcvMat::default_instance_ = NULL;

OcvMat* OcvMat::New(::google::protobuf::Arena* arena) const {
  OcvMat* n = new OcvMat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OcvMat::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv.OcvMat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OcvMat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OcvMat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, elt_type_);
  elt_size_ = 0;
  mat_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool OcvMat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencv.OcvMat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rows;
        break;
      }

      // optional int32 rows = 2;
      case 2: {
        if (tag == 16) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cols;
        break;
      }

      // optional int32 cols = 3;
      case 3: {
        if (tag == 24) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_elt_type;
        break;
      }

      // optional int32 elt_type = 4;
      case 4: {
        if (tag == 32) {
         parse_elt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elt_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_elt_size;
        break;
      }

      // optional int32 elt_size = 5;
      case 5: {
        if (tag == 40) {
         parse_elt_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elt_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mat_data;
        break;
      }

      // optional bytes mat_data = 6;
      case 6: {
        if (tag == 50) {
         parse_mat_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mat_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencv.OcvMat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencv.OcvMat)
  return false;
#undef DO_
}

void OcvMat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencv.OcvMat)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 rows = 2;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rows(), output);
  }

  // optional int32 cols = 3;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cols(), output);
  }

  // optional int32 elt_type = 4;
  if (this->elt_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->elt_type(), output);
  }

  // optional int32 elt_size = 5;
  if (this->elt_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->elt_size(), output);
  }

  // optional bytes mat_data = 6;
  if (this->mat_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->mat_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:opencv.OcvMat)
}

::google::protobuf::uint8* OcvMat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv.OcvMat)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 rows = 2;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rows(), target);
  }

  // optional int32 cols = 3;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cols(), target);
  }

  // optional int32 elt_type = 4;
  if (this->elt_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->elt_type(), target);
  }

  // optional int32 elt_size = 5;
  if (this->elt_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->elt_size(), target);
  }

  // optional bytes mat_data = 6;
  if (this->mat_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->mat_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opencv.OcvMat)
  return target;
}

int OcvMat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opencv.OcvMat)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 rows = 2;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 3;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // optional int32 elt_type = 4;
  if (this->elt_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->elt_type());
  }

  // optional int32 elt_size = 5;
  if (this->elt_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->elt_size());
  }

  // optional bytes mat_data = 6;
  if (this->mat_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mat_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OcvMat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opencv.OcvMat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OcvMat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OcvMat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opencv.OcvMat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opencv.OcvMat)
    MergeFrom(*source);
  }
}

void OcvMat::MergeFrom(const OcvMat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opencv.OcvMat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
  if (from.elt_type() != 0) {
    set_elt_type(from.elt_type());
  }
  if (from.elt_size() != 0) {
    set_elt_size(from.elt_size());
  }
  if (from.mat_data().size() > 0) {

    mat_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mat_data_);
  }
}

void OcvMat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opencv.OcvMat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcvMat::CopyFrom(const OcvMat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv.OcvMat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcvMat::IsInitialized() const {

  return true;
}

void OcvMat::Swap(OcvMat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OcvMat::InternalSwap(OcvMat* other) {
  std::swap(id_, other->id_);
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  std::swap(elt_type_, other->elt_type_);
  std::swap(elt_size_, other->elt_size_);
  mat_data_.Swap(&other->mat_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OcvMat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OcvMat_descriptor_;
  metadata.reflection = OcvMat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OcvMat

// optional int32 id = 1;
void OcvMat::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 OcvMat::id() const {
  // @@protoc_insertion_point(field_get:opencv.OcvMat.id)
  return id_;
}
 void OcvMat::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:opencv.OcvMat.id)
}

// optional int32 rows = 2;
void OcvMat::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 OcvMat::rows() const {
  // @@protoc_insertion_point(field_get:opencv.OcvMat.rows)
  return rows_;
}
 void OcvMat::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:opencv.OcvMat.rows)
}

// optional int32 cols = 3;
void OcvMat::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 OcvMat::cols() const {
  // @@protoc_insertion_point(field_get:opencv.OcvMat.cols)
  return cols_;
}
 void OcvMat::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:opencv.OcvMat.cols)
}

// optional int32 elt_type = 4;
void OcvMat::clear_elt_type() {
  elt_type_ = 0;
}
 ::google::protobuf::int32 OcvMat::elt_type() const {
  // @@protoc_insertion_point(field_get:opencv.OcvMat.elt_type)
  return elt_type_;
}
 void OcvMat::set_elt_type(::google::protobuf::int32 value) {
  
  elt_type_ = value;
  // @@protoc_insertion_point(field_set:opencv.OcvMat.elt_type)
}

// optional int32 elt_size = 5;
void OcvMat::clear_elt_size() {
  elt_size_ = 0;
}
 ::google::protobuf::int32 OcvMat::elt_size() const {
  // @@protoc_insertion_point(field_get:opencv.OcvMat.elt_size)
  return elt_size_;
}
 void OcvMat::set_elt_size(::google::protobuf::int32 value) {
  
  elt_size_ = value;
  // @@protoc_insertion_point(field_set:opencv.OcvMat.elt_size)
}

// optional bytes mat_data = 6;
void OcvMat::clear_mat_data() {
  mat_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OcvMat::mat_data() const {
  // @@protoc_insertion_point(field_get:opencv.OcvMat.mat_data)
  return mat_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OcvMat::set_mat_data(const ::std::string& value) {
  
  mat_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencv.OcvMat.mat_data)
}
 void OcvMat::set_mat_data(const char* value) {
  
  mat_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencv.OcvMat.mat_data)
}
 void OcvMat::set_mat_data(const void* value, size_t size) {
  
  mat_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencv.OcvMat.mat_data)
}
 ::std::string* OcvMat::mutable_mat_data() {
  
  // @@protoc_insertion_point(field_mutable:opencv.OcvMat.mat_data)
  return mat_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OcvMat::release_mat_data() {
  // @@protoc_insertion_point(field_release:opencv.OcvMat.mat_data)
  
  return mat_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OcvMat::set_allocated_mat_data(::std::string* mat_data) {
  if (mat_data != NULL) {
    
  } else {
    
  }
  mat_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mat_data);
  // @@protoc_insertion_point(field_set_allocated:opencv.OcvMat.mat_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace opencv

// @@protoc_insertion_point(global_scope)
