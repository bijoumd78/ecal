#include <iostream>
#include <fstream>
#include <opencv2/opencv.hpp>
#include <ecal/ecal.h>
#include <ecal/msg/protobuf/publisher.h>
#include <string>
#include "image.pb.h"

using namespace std;
using namespace cv;

int main(int argc, char **argv)
{

    // initialize eCAL API
    eCAL::Initialize(argc, argv, "image publisher");

    // set process state
    eCAL::Process::SetState(proc_sev_healthy, proc_sev_level1, "I feel good !");

    // create a publisher (topic name "person")
    eCAL::protobuf::CPublisher<opencv::OcvMat> pub("image");

    auto count = 0;

    while(eCAL::Ok())
    {
        Mat image;
        std::string str{};
        str = count % 2 ? std::string{"../index.jpeg"} : std::string{ "../index1.png"};

        std::cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ : " << str << std::endl;

        image = imread( str, 1 );

        if ( !image.data )
        {
            std::cerr <<"No image data \n";
            return -1;
        }

        //open a file in output, overwrite and binary mode
        fstream output("./file.out", ios::out | ios::trunc | ios::binary);

        //create an instance of the class generated by the compilation of the .proto file
        opencv::OcvMat serializableMat;

        //set the trivial fields
        serializableMat.set_id(++count);
        serializableMat.set_rows(image.rows);
        serializableMat.set_cols(image.cols);
        serializableMat.set_elt_type(image.type());
        serializableMat.set_elt_size((int)image.elemSize());

        //set the matrix's raw data
        size_t dataSize = image.rows * image.cols * image.elemSize();
        serializableMat.set_mat_data(image.data, dataSize);

        // send the image object
        pub.Send(serializableMat);

        std::cout << "Id: " << count <<std::endl;
        std::cout << "Height: " << image.rows << "   Width: " << image.cols << std::endl;

        // sleep 500 ms
        eCAL::Process::SleepMS(500);

        output.close();
    }

    // finalize eCAL API
    eCAL::Finalize();

    return 0;
}
